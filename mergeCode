import java.util.*;
import java.util.Map.Entry;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import jade.domain.introspection.GetValue;

import java.util.stream.IntStream;
import java.util.stream.LongStream;

public class tests {
	public static void divide(int[] arr,int n,int m) {
		if(m<=n) {
			return;
		}
		int mid=n+(m-n)/2;
		divide(arr, n, mid);
		divide(arr, mid+1, m);
		merge(arr,n,mid,m);
	}
	
	private static void merge(int[] arr, int n, int mid, int m) {
		int left = n;
		int shift = mid+1, x=0;
		
		int[] narr = new int[m-n+1];
		while(left<=mid && shift<=m) {
			if(arr[left]<=arr[shift]) {
				narr[x++]=arr[left++];
			}else {
				narr[x++]=arr[shift++];
			}
		}
		while(left<=mid) {
			narr[x++]=arr[left++];
		}
		while(shift<=m) {
			narr[x++]=arr[shift++];
		}
		for(int i=0;i<narr.length;i++) {
			arr[n+i]=narr[i];
		}
		
	}

	public static void main(String[] args) {
		int arr[] = {4,6,2,1,9,8,3,7};
		int m=arr.length;
		// m=;
		divide(arr,0,m-1);
		for(int i:arr) {
			System.out.println(i);
		}
		
	}
}
